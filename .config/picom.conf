#################################
#          Animations           #
#################################

# fly-in: Windows fly in from random directions to the screen
# maximize: Windows pop from center of the screen to their respective positions
# minimize: Windows minimize from their position to the center of the screen
# slide-in-center: Windows move from upper-center of the screen to their respective positions
# slide-out-center: Windows move to the upper-center of the screen
# slide-left: Windows are created from the right-most window position and slide leftwards
# slide right: Windows are created from the left-most window position and slide rightwards
# slide-down: Windows are moved from the top of the screen and slide downward
# slide-up: Windows are moved from their position to top of the screen
# squeeze: Windows are either closed or created to/from their center y-position (the animation is similar to a blinking eye)
# squeeze-bottom: Similar to squeeze, but the animation starts from bottom-most y-position
# zoom: Windows are either created or destroyed from/to their center (not the screen center)

#enable or disable animations
animations = false;
#change animation speed of windows in current tag e.g open window in current tag
animation-stiffness-in-tag = 500;
#change animation speed of windows when tag changes
animation-stiffness-tag-change = 1500;

animation-window-mass = 0.7;
animation-dampening = 20;
animation-clamping = false;

#open windows
animation-for-open-window = "zoom";
#minimize or close windows
#animation-for-unmap-window = "squeeze";
#popup windows
animation-for-transient-window = "zoom"; #available options: slide-up, slide-down, slide-left, slide-right, squeeze, squeeze-bottom, zoom

#set animation for windows being transitioned out while changings tags
#animation-for-prev-tag = "minimize";
#enables fading for windows being transitioned out while changings tags
#enable-fading-prev-tag = true;

#set animation for windows being transitioned in while changings tags
#animation-for-next-tag = "slide-in-center";
#enables fading for windows being transitioned in while changings tags
#enable-fading-next-tag = true;

#################################
#             Corners           #
#################################
# requires: https://github.com/sdhand/compton or https://github.com/jonaburg/picom
corner-radius = 0;
rounded-corners-exclude = [
  "class_g = 'dwm'",
  "class_g = 'dwmsystray'",
];

#################################
#             Shadows           #
#################################

# shadow = false
shadow = true;
# The blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 0;
# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.6;
# The left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = 8;
# The top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = 8;
# Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0

# Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0

# Blue color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0

shadow-exclude = [
  "class_g = 'Polybar'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'dwm'",
  "class_g = 'dwmsystray'",
  "window_type *= 'normal' && ! name ~= ''",
  "class_g = 'Peek'"
];

#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
fading = true;
# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.06;
# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.04;
# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 5
# Do not fade on window open/close.
no-fading-openclose = false
no_fading_destroyed_argb = false

#################################
#   Transparency / Opacity      #
#################################
# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
inactive-opacity = 1.0;
# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.0;
# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
#frame-opacity = 1.0
# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
inactive-opacity-override = false;
# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.0

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [
];

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

opacity-rule = [
  "80:class_g = 'Rofi'",
  "80:class_g = 'Dunst'",
   "100:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_FULLSCREEN'",
"100:_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_FULLSCREEN'",
"100:_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_FULLSCREEN'",
"100:_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_FULLSCREEN'",
"100:_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_FULLSCREEN'",
];

#################################
#     Background-Blurring       #
#################################

blur: {
  # requires: https://github.com/ibhagwan/picom
  method = "none";
  #method = "kernel";
  strength = 0;
  # deviation = 1.0;
  # kernel = "11x11gaussian";
  # Blur background of semi-transparent / ARGB windows.
  background = false;
  # Blur background of windows when the window frame is not opaque.
  background-frame = false;
  # Use fixed blur strength rather than adjusting according to window opacity.
  background-fixed = false;
  kern = "3x3box";
}

blur-background-exclude = [
  # prevents picom from blurring the background
  # when taking selection screenshot with `main`
  # https://github.com/naelstrof/maim/issues/130
  "class_g = 'slop'",
  "_GTK_FRAME_EXTENTS@:c",
  "class_g = 'Peek'"
];

#################################
#       General Settings        #
#################################
# experimental-backends = true;
# backend = "egl";
backend = "glx";
vsync = true

# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
# dbus = false

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
# mark-wmwin-focused = false
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = false;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = false;

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
# use-ewmh-active-win = false

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows. Known to cause flickering
# when redirecting/unredirecting windows. paint-on-overlay may make the flickering less obvious.
unredir-if-possible = true

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
detect-transient = true

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# detect-transient is enabled, too.
detect-client-leader = true

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
glx-no-stencil = true

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
glx-no-rebind-pixmap = true

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
# note: (Causing Weird Black semi opaque rectangles when terminal is opened)
use-damage = false

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window contents.
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl`
# in the source tree for examples.
# glx-fshader-win = ''

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
# transparent-clipping = false

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
log-level = "info";
show-all-xerrors = true

# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  # normal = { full-shadow = true; }
  utility = { shadow = false; }
  unknown = { fade = false; shadow = false; full-shadow = true; }
  popup_menu = { shadow = false; full-shadow = true; }
  dropdown_menu = { shadow = false; full-shadow = true; }
  notification = { shadow = true; full-shadow = true; redir-ignore = true;}
  notify = { shadow = true; full-shadow = true; redir-ignore = true;}
};
